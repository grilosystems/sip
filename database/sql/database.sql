-- MySQL Script generated by MySQL Workbench
-- Mon May 25 01:33:29 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema spi
-- -----------------------------------------------------
-- Sistema de Pagos Integral
DROP SCHEMA IF EXISTS spi ;

-- -----------------------------------------------------
-- Schema spi
--
-- Sistema de Pagos Integral
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS spi DEFAULT CHARACTER SET latin1 COLLATE latin1_spanish_ci ;
USE spi ;

-- -----------------------------------------------------
-- Table tipo_usuario
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tipo_usuario (
  id_tipo_usuario INT NOT NULL AUTO_INCREMENT,
  tipo VARCHAR(30) NOT NULL,
  PRIMARY KEY (id_tipo_usuario))
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_tipo_usuario_UNIQUE ON tipo_usuario (id_tipo_usuario ASC);

CREATE UNIQUE INDEX tipo_UNIQUE ON tipo_usuario (tipo ASC);


-- -----------------------------------------------------
-- Table usuario
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS usuario (
  id_usuario INT NOT NULL AUTO_INCREMENT,
  tipo_usuario INT NOT NULL,
  email_usuario VARCHAR(30) NOT NULL,
  password_usuario VARCHAR(10) NOT NULL,
  nombre_usuario VARCHAR(50) NOT NULL,
  rfc_usuario VARCHAR(45) NOT NULL,
  telefono_usuario VARCHAR(45) NULL,
  comentario_usuario VARCHAR(45) NULL,
  avatar_usuario VARCHAR(45) NULL,
  PRIMARY KEY (id_usuario),
  CONSTRAINT fk_tipo_usuario
    FOREIGN KEY (tipo_usuario)
    REFERENCES tipo_usuario (id_tipo_usuario)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_usuario_UNIQUE ON usuario (id_usuario ASC);

CREATE INDEX fk_tipo_usuario_idx ON usuario (tipo_usuario ASC);


-- -----------------------------------------------------
-- Table tipo_solicitud
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tipo_solicitud (
  id_tipo_solicitud INT NOT NULL AUTO_INCREMENT,
  nombre_solicitud VARCHAR(50) NOT NULL,
  PRIMARY KEY (id_tipo_solicitud))
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_tipo_solicitud_UNIQUE ON tipo_solicitud (id_tipo_solicitud ASC);


-- -----------------------------------------------------
-- Table estatus_solicitud
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS estatus_solicitud (
  id_estatus_solicitud INT NOT NULL AUTO_INCREMENT,
  estatus VARCHAR(20) NOT NULL,
  PRIMARY KEY (id_estatus_solicitud))
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_estatus_solicitud_UNIQUE ON estatus_solicitud (id_estatus_solicitud ASC);

CREATE UNIQUE INDEX estatus_UNIQUE ON estatus_solicitud (estatus ASC);


-- -----------------------------------------------------
-- Table departamento
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS departamento (
  id_departamento INT NOT NULL AUTO_INCREMENT,
  nombre_departamento VARCHAR(100) NOT NULL,
  PRIMARY KEY (id_departamento))
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_tipo_departamento_UNIQUE ON departamento (id_departamento ASC);


-- -----------------------------------------------------
-- Table desarrollo
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS desarrollo (
  id_desarrollo INT NOT NULL AUTO_INCREMENT,
  nombre_desarrollo VARCHAR(200) NOT NULL,
  rfc_desarrollo VARCHAR(50) NOT NULL,
  diereccion_desarrollo VARCHAR(200) NOT NULL,
  usuario_desarrollo INT NOT NULL,
  PRIMARY KEY (id_desarrollo),
  CONSTRAINT fk_usuario_desarrollo
    FOREIGN KEY (usuario_desarrollo)
    REFERENCES usuario (id_usuario)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_desarrollo_UNIQUE ON desarrollo (id_desarrollo ASC);

CREATE INDEX fk_usuario_desarrollo_idx ON desarrollo (usuario_desarrollo ASC);


-- -----------------------------------------------------
-- Table solicitud
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS solicitud (
  id_solicitud INT NOT NULL AUTO_INCREMENT,
  usuario_creador_solicitud INT NOT NULL,
  tipo_solicitud INT NOT NULL,
  fecha_solicitud DATE NOT NULL,
  fecha_requerida_solicitud DATE NOT NULL,
  beneficiario_solicitud VARCHAR(100) NOT NULL,
  concepto_solicitud TEXT NOT NULL,
  factura_solicitud VARCHAR(100) NOT NULL,
  tipo_desarrollo_solicitud INT NOT NULL,
  tipo_departamento_solicitud INT NOT NULL,
  importe_solicitud FLOAT NOT NULL,
  estatus_solicitud INT NOT NULL,
  imagen_factura_solicitud VARCHAR(45) NOT NULL,
  comentario_solicitud TEXT NULL,
  PRIMARY KEY (id_solicitud),
  CONSTRAINT fk_tipo_solicitud
    FOREIGN KEY (tipo_solicitud)
    REFERENCES tipo_solicitud (id_tipo_solicitud)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT fk_estatus_solicitud
    FOREIGN KEY (estatus_solicitud)
    REFERENCES estatus_solicitud (id_estatus_solicitud)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT fk_tipo_departamento_solicitud
    FOREIGN KEY (tipo_departamento_solicitud)
    REFERENCES departamento (id_departamento)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT fk_tipo_desarrollo
    FOREIGN KEY (tipo_desarrollo_solicitud)
    REFERENCES desarrollo (id_desarrollo)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT fk_usuario_creador_solicitud
    FOREIGN KEY (usuario_creador_solicitud)
    REFERENCES usuario (id_usuario)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_solicitud_UNIQUE ON solicitud (id_solicitud ASC);

CREATE INDEX fk_tipo_solicitud_idx ON solicitud (tipo_solicitud ASC);

CREATE INDEX fk_estatus_solicitud_idx ON solicitud (estatus_solicitud ASC);

CREATE INDEX fk_tipo_departamento_solicitud_idx ON solicitud (tipo_departamento_solicitud ASC);

CREATE INDEX fk_tipo_desarrollo_idx ON solicitud (tipo_desarrollo_solicitud ASC);

CREATE INDEX fk_usuario_creador_solicitud_idx ON solicitud (usuario_creador_solicitud ASC);


-- -----------------------------------------------------
-- Table cliente
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS cliente (
  id_cliente INT NOT NULL AUTO_INCREMENT,
  nombre_cliente VARCHAR(200) NOT NULL,
  depto_cliente VARCHAR(30) NOT NULL,
  asesor_cliente INT NOT NULL,
  comentarios_cliente TEXT NULL,
  PRIMARY KEY (id_cliente),
  CONSTRAINT fk_asesor_cliente
    FOREIGN KEY (asesor_cliente)
    REFERENCES usuario (id_usuario)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_cliente_UNIQUE ON cliente (id_cliente ASC);

CREATE INDEX fk_asesor_cliente_idx ON cliente (asesor_cliente ASC);


-- -----------------------------------------------------
-- Table comisiones
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS comisiones (
  id_comisiones INT NOT NULL AUTO_INCREMENT,
  fecha_solicitud_comisiones DATE NOT NULL,
  fecha_requerida_comisiones DATE NOT NULL,
  asesor_comisiones INT NOT NULL,
  concepto_comisiones TEXT NOT NULL,
  factura_comisiones VARCHAR(100) NOT NULL,
  tipo_departamento_comisiones INT NOT NULL,
  tipo_desarrollo_comisiones INT NOT NULL,
  monto_comisiones FLOAT NOT NULL,
  cliente_comisiones INT NOT NULL,
  anticipo_comisiones FLOAT NOT NULL,
  comentario_comisiones TEXT NOT NULL,
  estatus_comisiones INT NOT NULL,
  imagen_factura_comision VARCHAR(45) NOT NULL,
  PRIMARY KEY (id_comisiones),
  CONSTRAINT fk_tipo_departamento_comisiones
    FOREIGN KEY (tipo_departamento_comisiones)
    REFERENCES departamento (id_departamento)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT fk_tipo_desarrollo_comisiones
    FOREIGN KEY (tipo_desarrollo_comisiones)
    REFERENCES desarrollo (id_desarrollo)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT fk_cliente_comisiones
    FOREIGN KEY (cliente_comisiones)
    REFERENCES cliente (id_cliente)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT fk_estatus_comisiones
    FOREIGN KEY (estatus_comisiones)
    REFERENCES estatus_solicitud (id_estatus_solicitud)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT fk_asesor_comisiones
    FOREIGN KEY (asesor_comisiones)
    REFERENCES usuario (id_usuario)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_comisiones_UNIQUE ON comisiones (id_comisiones ASC);

CREATE INDEX fk_tipo_departamento_comisiones_idx ON comisiones (tipo_departamento_comisiones ASC);

CREATE INDEX fk_tipo_desarrollo_comisiones_idx ON comisiones (tipo_desarrollo_comisiones ASC);

CREATE INDEX fk_cliente_comisiones_idx ON comisiones (cliente_comisiones ASC);

CREATE INDEX fk_estatus_comisiones_idx ON comisiones (estatus_comisiones ASC);

CREATE INDEX fk_asesor_comisiones_idx ON comisiones (asesor_comisiones ASC);


-- -----------------------------------------------------
-- Table tbl_bitacora
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tbl_bitacora (
  id_bitacora INT NOT NULL,
  usuario INT NOT NULL,
  fecha DATE NOT NULL,
  hora TIME NOT NULL,
  PRIMARY KEY (id_bitacora),
  CONSTRAINT fk_usr
    FOREIGN KEY (usuario)
    REFERENCES usuario (id_usuario)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX id_bitacora_UNIQUE ON tbl_bitacora (id_bitacora ASC);

CREATE INDEX fk_usr_idx ON tbl_bitacora (usuario ASC);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table tipo_usuario
-- -----------------------------------------------------
START TRANSACTION;
USE spi;
INSERT INTO tipo_usuario (id_tipo_usuario, tipo) VALUES (1, 'Director');
INSERT INTO tipo_usuario (id_tipo_usuario, tipo) VALUES (2, 'Gerente');
INSERT INTO tipo_usuario (id_tipo_usuario, tipo) VALUES (3, 'Asesor');

COMMIT;


-- -----------------------------------------------------
-- Data for table tipo_solicitud
-- -----------------------------------------------------
START TRANSACTION;
USE spi;
INSERT INTO tipo_solicitud (id_tipo_solicitud, nombre_solicitud) VALUES (1, 'Rembolso caja chica');
INSERT INTO tipo_solicitud (id_tipo_solicitud, nombre_solicitud) VALUES (2, 'Proveedor');

COMMIT;


-- -----------------------------------------------------
-- Data for table estatus_solicitud
-- -----------------------------------------------------
START TRANSACTION;
USE spi;
INSERT INTO estatus_solicitud (id_estatus_solicitud, estatus) VALUES (1, 'NO APROBADO');
INSERT INTO estatus_solicitud (id_estatus_solicitud, estatus) VALUES (2, 'APROBADO');

COMMIT;


-- -----------------------------------------------------
-- Data for table departamento
-- -----------------------------------------------------
START TRANSACTION;
USE spi;
INSERT INTO departamento (id_departamento, nombre_departamento) VALUES (1, 'Titulación');
INSERT INTO departamento (id_departamento, nombre_departamento) VALUES (2, 'Cobranza');
INSERT INTO departamento (id_departamento, nombre_departamento) VALUES (3, 'Contabilidad');
INSERT INTO departamento (id_departamento, nombre_departamento) VALUES (4, 'Tesoreria');
INSERT INTO departamento (id_departamento, nombre_departamento) VALUES (5, 'Post-Venta');
INSERT INTO departamento (id_departamento, nombre_departamento) VALUES (6, 'Ventas');

COMMIT;


-- -----------------------------------------------------
-- Data for table desarrollo
-- -----------------------------------------------------
START TRANSACTION;
USE spi;
INSERT INTO desarrollo (id_desarrollo, nombre_desarrollo, rfc_desarrollo, diereccion_desarrollo, usuario_desarrollo) VALUES (1, 'CIMA OLIVA', 'CIMA OLIVA', 'CIMA OLIVA', 1);
INSERT INTO desarrollo (id_desarrollo, nombre_desarrollo, rfc_desarrollo, diereccion_desarrollo, usuario_desarrollo) VALUES (2, 'CIMA CAMARONES', 'CIMA CAMARONES', 'CIMA CAMARONES', 1);
INSERT INTO desarrollo (id_desarrollo, nombre_desarrollo, rfc_desarrollo, diereccion_desarrollo, usuario_desarrollo) VALUES (3, 'CIMA SOLIS', 'CIMA SOLIS', 'CIMA SOLIS', 1);
INSERT INTO desarrollo (id_desarrollo, nombre_desarrollo, rfc_desarrollo, diereccion_desarrollo, usuario_desarrollo) VALUES (4, 'CIMA BUENAVISTA', 'CIMA BUENAVISTA', 'CIMA BUENAVISTA', 1);
INSERT INTO desarrollo (id_desarrollo, nombre_desarrollo, rfc_desarrollo, diereccion_desarrollo, usuario_desarrollo) VALUES (5, 'CIMA SUR', 'CIMA SUR', 'CIMA SUR', 1);
INSERT INTO desarrollo (id_desarrollo, nombre_desarrollo, rfc_desarrollo, diereccion_desarrollo, usuario_desarrollo) VALUES (6, 'CIMA LA VIGA', 'CIMA LA VIGA', 'CIMA LA VIGA', 1);
INSERT INTO desarrollo (id_desarrollo, nombre_desarrollo, rfc_desarrollo, diereccion_desarrollo, usuario_desarrollo) VALUES (7, 'CIMA RECREO', 'CIMA RECREO', 'CIMA RECREO', 1);
INSERT INTO desarrollo (id_desarrollo, nombre_desarrollo, rfc_desarrollo, diereccion_desarrollo, usuario_desarrollo) VALUES (8, 'CIMA SANTA ANITA', 'CIMA SANTA ANITA', 'CIMA SANTA ANITA', 1);

COMMIT;

-- -----------------------------------------------------
-- Data for table usuario
-- -----------------------------------------------------
START TRANSACTION;
USE spi;
INSERT INTO usuario (id_usuario, tipo_usuario, email_usuario, password_usuario, nombre_usuario, rfc_usuario, telefono_usuario, comentario_usuario, avatar_usuario)
VALUES
  (NULL, 1, 'adim@spi.com', 'spi123', 'SPI ADMIN', '', NULL, NULL, NULL);

COMMIT;
